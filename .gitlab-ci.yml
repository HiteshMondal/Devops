# .gitlab-ci.yml - GitLab CI/CD Pipeline Configuration

# Global variables
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_IMAGE: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"
  DOCKER_IMAGE_LATEST: "${CI_REGISTRY_IMAGE}:latest"
  KUBE_NAMESPACE: "devops-demo"
  AWS_REGION: "us-east-1"
  TERRAFORM_VERSION: "1.5.0"
  KUBECTL_VERSION: "1.28.0"
  HELM_VERSION: "3.12.0"

# Stages definition
stages:
  - build
  - test
  - security
  - package
  - deploy-staging
  - test-staging
  - deploy-production
  - rollback

# Cache configuration
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .terraform/
    - .cache/

# Templates
.docker_template: &docker_definition
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

.kubectl_template: &kubectl_definition
  image: bitnami/kubectl:${KUBECTL_VERSION}
  before_script:
    - echo "$KUBE_CONFIG" | base64 -d > /tmp/kubeconfig
    - export KUBECONFIG=/tmp/kubeconfig

.terraform_template: &terraform_definition
  image: hashicorp/terraform:${TERRAFORM_VERSION}
  before_script:
    - terraform --version
    - cd terraform/
    - terraform init

# Build Stage
build:app:
  stage: build
  image: node:18-alpine
  script:
    - echo "Building application..."
    - npm ci --only=production || echo "No npm dependencies"
    - |
      cat > build-info.json <<EOF
      {
        "version": "${CI_COMMIT_SHORT_SHA}",
        "branch": "${CI_COMMIT_REF_NAME}",
        "build_number": "${CI_PIPELINE_ID}",
        "build_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
      }
      EOF
  artifacts:
    paths:
      - index.html
      - build-info.json
    expire_in: 1 week
  only:
    - branches
    - tags

# Test Stage
test:lint:
  stage: test
  image: node:18-alpine
  script:
    - npm install -g htmlhint csslint jshint
    - htmlhint index.html || true
    - csslint styles.css || true
    - jshint script.js || true
  allow_failure: true
  only:
    - merge_requests
    - main

test:unit:
  stage: test
  image: node:18-alpine
  script:
    - echo "Running unit tests..."
    - npm test || echo "No tests configured"
  coverage: '/Coverage: \d+\.\d+%/'
  only:
    - merge_requests
    - main

test:integration:
  stage: test
  <<: *docker_definition
  script:
    - docker build -t test-image .
    - docker run -d --name test-container -p 8080:8080 test-image
    - sleep 5
    - docker exec test-container curl -f http://localhost:8080/health
    - docker stop test-container
    - docker rm test-container
  only:
    - merge_requests
    - main

# Security Stage
security:sast:
  stage: security
  image: 
    name: semgrep/semgrep:latest
    entrypoint: [""]
  script:
    - semgrep --config=auto --json -o sast-report.json .
  artifacts:
    reports:
      sast: sast-report.json
    expire_in: 1 week
  only:
    - main
    - merge_requests

security:container:
  stage: security
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  script:
    - trivy fs --security-checks vuln,config --format json -o container-scan.json .
    - trivy fs --security-checks vuln,config .
  artifacts:
    reports:
      container_scanning: container-scan.json
    expire_in: 1 week
  allow_failure: true
  only:
    - main
    - merge_requests

security:dependency:
  stage: security
  image: owasp/dependency-check:latest
  script:
    - |
      /usr/share/dependency-check/bin/dependency-check.sh \
        --scan . \
        --format JSON \
        --out dependency-